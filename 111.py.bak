#!/usr/bin/env python
#-*- coding:utf-8 -*-

import serial
import threading
import time
import select
import sys
import queue

def serial_data_process(serial):
    inputs = [serial,]
    outputs = []
    msglen = 0
    ch_list = []
    timeout_count = 0
    message_queue = {}
    message_queue[ser] = queue.queue()
    recv_count = 0
    all_count = 0

    while True:
        readable,writeable,exceptional = select.select(inputs, outputs, inputs, 1)
        if not (readable or writeable or exceptional):
            timeout_count = timeout_count + 1
            msg_list = read_cmd_from_file()
            if msg_list:
                num = len(msg_list)
                if num == 2:
                    #print 'id=%d,cmd=%d' % (msg_list[0], msg_list[1])
                    message_queue[ser].put(msg_list)
                    outputs.append(ser)

            if timeout_count > timeout:
                timeout_count = 0
                all_count = all_count + 1
                print 'lost %d message' % (all_count - recv_count)
                
            continue
        for r in readable:
            ch = r.read(1).encode('hex')
            if ch == 'a5':
                msglen = 1 
            if msglen > 0:
                ch_list.append(ch)
                msglen = msglen + 1 
            if msglen == 14: 
                msglen = 0
                timeout_count = 0
                print time.strftime('%H:%M:%S',time.localtime(time.time())),
                for val in ch_list:
                    print(val),
                print('lost:'),
                print all_count - recv_count
                recv_count = recv_count + 1
                all_count = all_count + 1
                ch_list = []
        for w in writeable:
            try:
                msg = message_queue[w].get_nowait()
            except Queue.Empty:
                outputs.remove(w)
            except Exception as e:
                print e.args
                if w in outputs:
                    outputs.remove(w)
            else:
                try:
                    send_id = msg[0]
                    send_cmd = msg[1]
                    send_buff = calc_senddata(send_id, send_cmd)
                    print 'serial send:',
                    for val in send_buff:
                        print hex(val),
                        w.write(chr(val))
                    print(" ")
                    outputs.remove(w)
                except Exception as e:
                    print e.args


if __name__ == '__main__':

    serial_data_process(serial)

